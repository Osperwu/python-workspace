'''
在這個情況下，**`name1`** 和 **`name2`** 都是字串變數，它們的值都是 **`'osp'`**。
因為字串是不可變的，Python 在內部會對常用字串進行緩存（caching），以節省內存並提高效能。
當你創建一個字串變數時，Python 會先檢查內部的緩存池中是否已經有該字串的實例。
如果有，它會直接返回這個實例的引用，而不是創建一個新的字串對象。
這種行為稱為字串的內部緩存（string interning）。

因此，當你創建了兩個值相同的字串變數 **`name1`** 和 **`name2`** 時，
它們實際上引用的是同一個字串對象，這就是為什麼 **`name1 is name2`** 的結果為 True。

另一方面，**`name1 == name2`** 是進行值的比較，它會比較兩個字串變數的內容是否相等。
在這個例子中，**`name1`** 和 **`name2`** 的值都是 **`'osp'`**，所以它們的比較結果為 True。

需要注意的是，這種內部緩存的行為只對某些常用字串值起作用，並且可能因為 Python 解釋器的實現而有所不同。
因此，在一般情況下，我們不應該依賴 **`is`** 運算符來比較字串的相等性，而應該使用 **`==`** 運算符來進行比較。
'''
name1 = 'osp'
name2 = 'osp'
print(name1 == name2)
print(name1 is name2)
